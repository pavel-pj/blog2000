services:
  web:
    image: nginx:latest # Using the default Nginx image with custom configuration.
    restart: unless-stopped  # Добавьте эту строку
    volumes:
      # Mount the application code for live updates
      - ./backend:/var/www
      # Mount the Nginx configuration file
      - ./docker/backend/development/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      # Map port 80 inside the container to the port specified by 'NGINX_PORT' on the host machine
      - "8080:80"
    environment:
      - NGINX_HOST=localhost
    networks:
      - laravel-development
    depends_on:
      - php-fpm  # ПРАВИЛЬНЫЙ СИНТАКСИС - простой список   # condition: service_started  # Wait for php-fpm to start
       

  php-fpm:
    # For the php-fpm service, we will create a custom image to install the necessary PHP extensions and setup proper permissions.
    build:
      context: .
      dockerfile: ./docker/backend/common/php-fpm/Dockerfile
      target: development
      args:
        UID: ${UID:-1000}
        GID: ${GID:-1000}
        XDEBUG_ENABLED: ${XDEBUG_ENABLED:-true}
        XDEBUG_MODE: develop,coverage,debug,profile
        XDEBUG_HOST: ${XDEBUG_HOST:-host.docker.internal}
        XDEBUG_IDE_KEY: ${XDEBUG_IDE_KEY:-DOCKER}
        XDEBUG_LOG: /dev/stdout
        XDEBUG_LOG_LEVEL: 0
    env_file:
      # Load the environment variables from the Laravel application
      - .env
    environment:  # ← ДОБАВЬТЕ ЭТОТ БЛОК
    - APP_DEBUG=true
    - APP_ENV=local
    - LOG_CHANNEL=stderr
    - LOG_LEVEL=debug  
    user: "${UID:-1000}:${GID:-1000}"
    volumes:
      # Mount the application code for live updates
      - ./backend:/var/www
      - ./backend/storage/framework/views:/var/www/storage/framework/views  # Явное монтирование
      - ./backend:/var/www:cached  # Добавьте :cached для Mac/Windows
    networks:
      - laravel-development
    depends_on:
      postgres:
        condition: service_started  # Wait for postgres to start

  # Frontend сервис
  frontend:
    build:
      context: .
      dockerfile: ./docker/frontend/Dockerfile
    restart: unless-stopped
    ports:
      - "5180:5173"  # Vite dev server на localhost:5173
    tty: true
    working_dir: /var/www
    volumes:
      - ./frontend:/var/www
      - /var/www/node_modules  # Изолируем node_modules
    networks:
      - laravel-development
    #environment:
      #- VITE_API_URL=http://localhost:8080  # URL для API запросов
      #- VITE_API_URL=${VITE_API_URL}
    depends_on:
      - web  # Ждем пока backend запустится


  workspace:
   # For the workspace service, we will also create a custom image to install and setup all the necessary stuff.
    user: "${HOST_UID:-1000}:${HOST_GID:-1000}"
    build:
      context: .
      dockerfile: ./docker/backend/development/workspace/Dockerfile
      args:
        UID: ${UID:-1000}
        GID: ${GID:-1000}
        XDEBUG_ENABLED: ${XDEBUG_ENABLED:-true}
        XDEBUG_MODE: develop,coverage,debug,profile
        XDEBUG_HOST: ${XDEBUG_HOST:-host.docker.internal}
        XDEBUG_IDE_KEY: ${XDEBUG_IDE_KEY:-DOCKER}
        XDEBUG_LOG: /dev/stdout
        XDEBUG_LOG_LEVEL: 0
    ports:
      - '${VITE_PORT:-5174}:5174'
    tty: true  # Enables an interactive terminal
    stdin_open: true  # Keeps standard input open for 'docker exec'
    env_file:
      - .env
    environment:  # ← ДОБАВЬТЕ ЭТОТ БЛОК
      - APP_DEBUG=true
      - APP_ENV=local
      - LOG_CHANNEL=stderr
      - LOG_LEVEL=debug  
    volumes:
      - ./backend:/var/www
    networks:
      - laravel-development

  postgres:
    image: postgres:16
    ports:
      - "5440:5432"
      #- "${POSTGRES_PORT:-5432}:5432"
    environment:
      - POSTGRES_DB=app
      - POSTGRES_USER=laravel
      - POSTGRES_PASSWORD=secret
      - POSTGRES_MULTIPLE_DATABASES=app,app_test  # Добавляем тестовую БД
    volumes:
      - postgres-data-development:/var/lib/postgresql/data
      - /var/www/databases/blog/backup_20250920_134341.sql:/tmp/db1/db_backup.sql:ro
      - ./docker/backend/development/database/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh:ro
      - ./docker/backend/development/database/restore-databases.sh:/docker-entrypoint-initdb.d/restore-databases.sh:ro
    networks:
      - laravel-development
 


#  redis:
#    image: redis:alpine
#    networks:
#      - laravel-development

networks:
  laravel-development:

volumes:
  postgres-data-development:
