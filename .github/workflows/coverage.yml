name:  Tests Coverage

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: app_test
          POSTGRES_USER: laravel
          POSTGRES_PASSWORD: secret
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        extensions: pgsql, mbstring, xml, curl, dom, fileinfo, intl, json, zip, pcov
        coverage: pcov
        tools: composer

    - name: Install dependencies
      working-directory: ./backend
      run: composer install --prefer-dist --no-progress --no-interaction

    - name: Create .env file
      working-directory: ./backend
      run: |
        cp .env.dev.example .env
        echo "APP_KEY=base64:$(openssl rand -base64 32)" >> .env

    - name: Generate application key
      working-directory: ./backend
      run: php artisan key:generate

    - name: Wait for PostgreSQL
      run: sleep 10

    - name: Run tests with coverage
      working-directory: ./backend
      env:
        DB_TEST_HOST: localhost
        DB_TEST_PORT: 5432
        DB_TEST_DATABASE: app_test
        DB_TEST_USERNAME: laravel
        DB_TEST_PASSWORD: secret
      run: |
        # Генерируем clover отчет
        ./vendor/bin/phpunit --coverage-clover=coverage.xml
        # Генерируем HTML отчет
        ./vendor/bin/phpunit --coverage-html=storage/coverage

    - name: Extract coverage percentage
      id: coverage
      working-directory: ./backend
      run: |
        # Извлекаем процент покрытия из XML
        COVERAGE_PERCENT=$(grep -o 'line-rate="[0-9.]*"' coverage.xml | head -1 | cut -d'"' -f2)
        COVERAGE_PERCENT=$(echo "scale=0; $COVERAGE_PERCENT * 100" | bc)
        echo "COVERAGE_PERCENT=$COVERAGE_PERCENT" >> $GITHUB_ENV
        echo "Coverage: $COVERAGE_PERCENT%"

    - name: Generate coverage badge
      run: |
        # Создаем badge с помощью Shields.io
        BADGE_URL="https://img.shields.io/badge/test%20coverage-$COVERAGE_PERCENT%25-blue"
        curl -s -o coverage-badge.svg "$BADGE_URL"

    - name: Upload coverage report artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          ./backend/storage/coverage/
          ./coverage-badge.svg
        retention-days: 7

    - name: Update README with coverage badge
      run: |
        # Обновляем README с новым бейджем
        BADGE_MARKDOWN="[![Test Coverage](https://img.shields.io/badge/coverage-$COVERAGE_PERCENT%25-blue)]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)"
        
        # Создаем или обновляем раздел с coverage в README
        if grep -q "## Test Coverage" README.md; then
          # Обновляем существующий бейдж
          sed -i "s|!\\[Test Coverage\\].*|![Test Coverage](https://img.shields.io/badge/coverage-$COVERAGE_PERCENT%25-blue)|" README.md
        else
          # Добавляем новый раздел
          echo -e "\n## Test Coverage\n\n$BADGE_MARKDOWN\n" >> README.md
        fi

        # Коммитим изменения
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git add README.md
        git commit -m "Update test coverage badge: $COVERAGE_PERCENT%" || echo "No changes to commit"
        git push